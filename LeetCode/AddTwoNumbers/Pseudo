You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each node contains a single digit. Add the two numbers and return as a linked list

Example
2->4->3   +   5->6->4
Output
7->0->8


So 342 + 465 = 807

Need to consider the length of each list, but each list should still start out on the same digits.

List Def:
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

Seems pretty straight forward. As we move forward at each digit we just need to add the values for each side, check if we need to carry a one, then create a node for that place
We need to be of one list being empty and should def not assume both are the same length. 

if LeftNode != nullptr leftVal = LeftNode->val
if RightNode


Get values from both sides (might have only one side here)
Add them
Add one if we have carried one
Create the new node from the value
Save if we should carry one to the next level
Advance both sides one space (make sure we don't go off the end)
If both sides are empty break
Check if we have carried one final one and add it here if needed
